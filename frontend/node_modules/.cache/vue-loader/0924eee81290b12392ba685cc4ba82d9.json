{"remainingRequest":"F:\\BS\\annotate-system-3\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\BS\\annotate-system-3\\frontend\\src\\views\\taskManage\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\BS\\annotate-system-3\\frontend\\src\\views\\taskManage\\index.vue","mtime":1640359416572},{"path":"F:\\BS\\annotate-system-3\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1639628022585},{"path":"F:\\BS\\annotate-system-3\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1639628022471},{"path":"F:\\BS\\annotate-system-3\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1639628024341},{"path":"F:\\BS\\annotate-system-3\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1639628022585},{"path":"F:\\BS\\annotate-system-3\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1639628023030}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7CiAgZGVsZXRlQW5ub3RhdGVUZXh0QXBpLAogIHVwZGF0ZUFubm90YXRlVGV4dEluZm9BcGksCiAgcmVtb3ZlQWxsQW5ub3RhdGVUZXh0QXBpLAogIGFkZFRhc2tBcGksCiAgcmVjZWl2ZVRhc2tBcGkKfSBmcm9tICJAL2FwaS9hbm5vdGF0ZVRleHQiOwppbXBvcnQge2dldFRva2VufSBmcm9tICJAL3V0aWxzL2F1dGgiOwppbXBvcnQge21hcEdldHRlcnN9IGZyb20gInZ1ZXgiOwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJUYWJsZUxpc3QiLAogIGZpbHRlcnM6IHsKICAgIHN0YXR1c0ZpbHRlcihzdGF0dXMpIHsKICAgICAgY29uc3Qgc3RhdHVzTWFwID0gewogICAgICAgIOW3sumihuWPljogInN1Y2Nlc3MiLAogICAgICAgIOacqumihuWPljogImdyYXkiLAogICAgICAgIOW3suWujOaIkDogImRvbmUiLAogICAgICB9OwogICAgICByZXR1cm4gc3RhdHVzTWFwW3N0YXR1c107CiAgICB9LAogIH0sCgogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBjaGVja0xpc3Q6IFtdLAogICAgICBzZWFyY2hUYXJnZXQ6ICLmj4/ov7AiLCAvLyDmkJzntKLlr7nosaEKICAgICAgc2hvd1Rhc2tGb3JtOiBmYWxzZSwKICAgICAga2V5d29yZHM6ICIiLCAvLyDmkJzntKLlhbPplK7or40KICAgICAgZmlsdGVyTGlzdDogW10sIC8v56ym5ZCI5p2h5Lu255qE5pWw5o2uCiAgICAgIGltZ0xpc3Q6IFtdLAogICAgICBsaXN0OiBbXSwgLy8g5omA5pyJ5pWw5o2u5YiX6KGoCiAgICAgIGxpc3RMb2FkaW5nOiB0cnVlLCAvL+WKoOi9veaViOaenAogICAgICBzaG93RWRpdEZvcm06IGZhbHNlLCAvL+e8lui+keahhueahOaYvumakAogICAgICBsaXN0RWRpdEluZGV4OiAwLCAvLyDnvJbovpHntKLlvJUKICAgICAgaGFuZGxlSXRlbUlkOiAwLCAvLyDmk43kvZzmnaHnm67nmoRpZAogICAgICB0YXNrZm9ybTogewogICAgICAgIG5hbWU6ICIiLAogICAgICAgIHN0YXR1czogIiIsCiAgICAgICAgaW1nczogW10sCiAgICAgICAgZGVzY3JpcHRpb246ICIiLAogICAgICB9LAogICAgICBmb3JtOiB7CiAgICAgICAgLy/nvJbovpHmoYbmlbDmja4KICAgICAgICBkZXNjcmlwdGlvbjogIiIsCiAgICAgICAgdGV4dDogIiIsCiAgICAgIH0sCiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIC8vIOe8lui+keahhuWuveW6pgogICAgd2lkdGgoKSB7CiAgICAgIHJldHVybiB3aW5kb3cuaW5uZXJXaWR0aCA8PSA0MDAgPyAiODAlIiA6ICIzMCUiOwogICAgfSwKICAgIHRva2VuKCkgewogICAgICByZXR1cm4gZ2V0VG9rZW4oKTsKICAgIH0sCiAgICAuLi5tYXBHZXR0ZXJzKFsidGFza0xpc3QiXSksCiAgICAuLi5tYXBHZXR0ZXJzKFsiYW5ub3RhdGVUZXh0TGlzdCJdKSwKICAgIC4uLm1hcEdldHRlcnMoWyJyZWNlaXZldGFza0xpc3QiXSksCiAgfSwKICBtb3VudGVkKCkgewogICAgdGhpcy5saXN0ID0gdGhpcy5maWx0ZXJMaXN0ID0gdGhpcy50YXNrTGlzdDsKICAgIHRoaXMuaW1nTGlzdCA9IHRoaXMuYW5ub3RhdGVUZXh0TGlzdDsKICAgIHRoaXMubGlzdExvYWRpbmcgPSBmYWxzZTsKICB9LAogIG1ldGhvZHM6IHsKICAgIHNlbGVjdEltZygpIHsKICAgICAgY29uc29sZS5sb2codGhpcy5jaGVja0xpc3QpCiAgICB9LAoKICAgIHRhc2tDcmVhdGUoKSB7CiAgICAgIHRoaXMuc2hvd1Rhc2tGb3JtID0gdHJ1ZTsKICAgIH0sCiAgICBvbkJlZm9yZVVwbG9hZChmaWxlKSB7CiAgICAgIGNvbnN0IGlzSU1BR0UgPSBmaWxlLnR5cGUgPT09ICdpbWFnZS9qcGVnJyB8fCAnaW1hZ2UvZ2lmJyB8fCAnaW1hZ2UvcG5nJyB8fCAndmlkZW8vbXA0JyB8fCAndmlkZW8vYXZpJyB8fCAndmlkZW8vcm12Yic7CgogICAgICBpZiAoIWlzSU1BR0UpIHsKICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKCfkuIrkvKDmlofku7blj6rog73mmK/lm77niYfmiJbogIXop4bpopHmoLzlvI8hJyk7CiAgICAgIH0KICAgICAgcmV0dXJuIGlzSU1BR0U7CiAgICB9LAogICAgLyoqCiAgICAgKiDkuIrkvKDmiJDlip/nmoTlm57osIPlh73mlbAKICAgICAqIEBwYXJhbSByZXNwb25zZSDlk43lupTmlbDmja4KICAgICAqLwogICAgaGFuZGxlU3VjY2VzcygpIHsKICAgICAgY29uc29sZS5sb2codGhpcy5jaGVja0xpc3QpOwogICAgICB0aGlzLnRhc2tmb3JtLmltZ3MgPSB0aGlzLmNoZWNrTGlzdDsKICAgICAgdGhpcy5maWx0ZXJMaXN0LnB1c2godGhpcy50YXNrZm9ybSk7CiAgICAgIHRoaXMuJG1lc3NhZ2Uuc3VjY2Vzcygi5Lu75Yqh5Yib5bu65oiQ5YqfIik7CiAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCJ1c2VyL3NldFRhc2tMaXN0IiwgdGhpcy5maWx0ZXJMaXN0KTsKICAgICAgY29uc29sZS5sb2coIiVzIiwgdGhpcy50YXNrZm9ybS5uYW1lKTsKICAgICAgYWRkVGFza0FwaSh7CiAgICAgICAgbmFtZTogdGhpcy50YXNrZm9ybS5uYW1lLAogICAgICAgIHN0YXR1czogdGhpcy50YXNrZm9ybS5zdGF0dXMsCiAgICAgICAgaW1nczogdGhpcy50YXNrZm9ybS5pbWdzLAogICAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLnRhc2tmb3JtLmRlc2NyaXB0aW9uCiAgICAgIH0pOwogICAgICB0aGlzLnNob3dUYXNrRm9ybSA9IGZhbHNlOwogICAgfSwKICAgIC8qKgogICAgICog5LiK5Lyg5aSx6LSl5Zue6LCD5Ye95pWwCiAgICAgKi8KICAgIGhhbmRsZUVycm9yKCkgewogICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKCLkuIrkvKDlpLHotKUiKTsKICAgIH0sCiAgICAvKioKICAgICAqIOWvvOWHuuaVsOaNrgogICAgICovCiAgICAvLyAgVE9ETyDlr7zlh7rmlbDmja4KICAgIGV4cG9ydERhdGEoKSB7CiAgICB9LAogICAgLyoqCiAgICAgKiDmuIXnqbrmlofmnKzmlbDmja4KICAgICAqLwogICAgcmVtb3ZlQWxsKCkgewogICAgICB0aGlzLiRjb25maXJtKCLnoa7lrpropoHliKDpmaTlkJc/IiwgIuitpuWRiiIsIHsKICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogIuehruWumiIsCiAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogIuWPlua2iCIsCiAgICAgICAgdHlwZTogIndhcm5pbmciLAogICAgICB9KS50aGVuKCgpID0+IHsKICAgICAgICByZW1vdmVBbGxBbm5vdGF0ZVRleHRBcGkodGhpcy50b2tlbik7CiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goInVzZXIvc2V0VGFza0xpc3QiLCBbXSk7CiAgICAgICAgdGhpcy5saXN0ID0gW107CiAgICAgICAgdGhpcy5maWx0ZXJMaXN0ID0gW107CiAgICAgIH0pOwogICAgfSwKCiAgICAvKioKICAgICAqIOaQnOe0ouaWh+acrAogICAgICovCiAgICBzZWFyY2goKSB7CiAgICAgIGxldCBrZXl3b3JkcyA9IHRoaXMua2V5d29yZHMudHJpbSgpOwoKICAgICAgaWYgKHRoaXMuc2VhcmNoVGFyZ2V0ID09ICLmj4/ov7AiKSB7CiAgICAgICAgdGhpcy5maWx0ZXJMaXN0ID0gdGhpcy5saXN0LmZpbHRlcigoaXRlbSkgPT4KICAgICAgICAgIGl0ZW0uZGVzY3JpcHRpb24uaW5jbHVkZXMoa2V5d29yZHMpCiAgICAgICAgKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmZpbHRlckxpc3QgPSB0aGlzLmxpc3QuZmlsdGVyKChpdGVtKSA9PgogICAgICAgICAgaXRlbVt0aGlzLnNlYXJjaFRhcmdldF0uaW5jbHVkZXMoa2V5d29yZHMpCiAgICAgICAgKTsKICAgICAgfQogICAgfSwKICAgIC8qKgogICAgICog6KGo5qC85qC35byPCiAgICAgKi8KICAgIHRhYmxlUm93Q2xhc3NOYW1lKHtyb3csIHJvd0luZGV4fSkgewogICAgICByb3c7CiAgICAgIGlmIChyb3dJbmRleCAlIDIpIHsKICAgICAgICByZXR1cm4gImhpZ2hsaWdodC1yb3ciOwogICAgICB9CiAgICAgIHJldHVybiAiIjsKICAgIH0sCiAgICAvKioKICAgICAqIOWJjeW+gOagh+azqOmhtemdogogICAgICovCiAgICByZWNlaXZlVGFzayhpbmRleCkgewogICAgICB0aGlzLmZpbHRlckxpc3RbaW5kZXhdLnN0YXR1cyA9ICLlt7Lpooblj5YiOwogICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgidXNlci9hZGRSZWNlaXZlVGFza0xpc3QiLCB0aGlzLmZpbHRlckxpc3RbaW5kZXhdKTsKCiAgICAgIHJlY2VpdmVUYXNrQXBpKHRoaXMuZmlsdGVyTGlzdFtpbmRleF0pLnRoZW4oKHJlc3BvbnNlKSA9PiB7CiAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UuZGF0YVsiZmxhZyJdKQogICAgICAgIGlmIChyZXNwb25zZS5kYXRhWyJmbGFnIl0pewogICAgICAgICAgdGhpcy4kbWVzc2FnZS5zdWNjZXNzKCLpooblj5bmiJDlip8iKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIC8qKgogICAgICog57yW6L6RCiAgICAgKiBAcGFyYW0ge29iamVjdH0gcm93IOaTjeS9nOW9k+WJjeihjOaVsOaNrgogICAgICovCiAgICBoYW5kbGVFZGl0KGluZGV4LCByb3cpIHsKICAgICAgdGhpcy5zaG93RWRpdEZvcm0gPSB0cnVlOwogICAgICB0aGlzLmxpc3RFZGl0SW5kZXggPSBpbmRleDsKICAgICAgdGhpcy50YXNrZm9ybS5kZXNjcmlwdGlvbiA9IHJvdy5kZXNjcmlwdGlvbjsKICAgICAgdGhpcy50YXNrZm9ybS5uYW1lID0gcm93Lm5hbWU7CiAgICAgIHRoaXMuaGFuZGxlSXRlbUlkID0gcm93LmlkOwogICAgfSwKICAgIC8qKgogICAgICog5pu05paw5pWw5o2uCiAgICAgKi8KICAgIHVwZGF0ZSgpIHsKICAgICAgdGhpcy5maWx0ZXJMaXN0W3RoaXMubGlzdEVkaXRJbmRleF0uZGVzY3JpcHRpb24gPSB0aGlzLmZvcm0uZGVzY3JpcHRpb247CiAgICAgIHRoaXMuZmlsdGVyTGlzdFt0aGlzLmxpc3RFZGl0SW5kZXhdLnRleHQgPSB0aGlzLmZvcm0udGV4dDsKICAgICAgdXBkYXRlQW5ub3RhdGVUZXh0SW5mb0FwaSh0aGlzLmZpbHRlckxpc3RbdGhpcy5saXN0RWRpdEluZGV4XSk7CiAgICAgIHRoaXMubGlzdC5mb3JFYWNoKChpdGVtKSA9PiB7CiAgICAgICAgaWYgKGl0ZW0uaWQgPT09IHRoaXMuaGFuZGxlSXRlbUlkKSB7CiAgICAgICAgICBpdGVtLmRlc2NyaXB0aW9uID0gdGhpcy5mb3JtLmRlc2NyaXB0aW9uOwogICAgICAgICAgaXRlbS50ZXh0ID0gdGhpcy5mb3JtLnRleHQ7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgdGhpcy5zaG93RWRpdEZvcm0gPSBmYWxzZTsKICAgIH0sCiAgICAvKioKICAgICAqIOWIoOmZpOaWh+acrAogICAgICovCiAgICBoYW5kbGVEZWxldGUoaW5kZXgpIHsKICAgICAgbGV0IGlkID0gdGhpcy5maWx0ZXJMaXN0W2luZGV4XS5pZDsKICAgICAgZGVsZXRlQW5ub3RhdGVUZXh0QXBpKGlkKTsKICAgICAgdGhpcy5maWx0ZXJMaXN0LnNwbGljZShpbmRleCwgMSk7CiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5saXN0Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKHRoaXMubGlzdFtpXS5pZCA9PSBpZCkgewogICAgICAgICAgdGhpcy5saXN0LnNwbGljZShpLCAxKTsKICAgICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCJ1c2VyL3NldEFubm90YXRlVGV4dExpc3QiLCB0aGlzLmxpc3QpOwogICAgICAgIH0KICAgICAgfQogICAgfSwKICB9LAp9Owo="},null]}