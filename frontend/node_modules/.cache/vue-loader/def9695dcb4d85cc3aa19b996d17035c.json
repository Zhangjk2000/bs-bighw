{"remainingRequest":"F:\\BS\\annotate-system-3\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\BS\\annotate-system-3\\frontend\\src\\views\\taskManage\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\BS\\annotate-system-3\\frontend\\src\\views\\taskManage\\index.vue","mtime":1640332804520},{"path":"F:\\BS\\annotate-system-3\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1639628022585},{"path":"F:\\BS\\annotate-system-3\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1639628024341},{"path":"F:\\BS\\annotate-system-3\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1639628022585},{"path":"F:\\BS\\annotate-system-3\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1639628023030}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"index.vue","sourceRoot":"src/views/taskManage","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <!-- 按钮组 -->\n    <div class=\"button-group\">\n      <div class=\"button-group-item\">\n        <el-button type=\"primary\" @click=\"taskCreate\">\n          创建任务\n        </el-button>\n      </div>\n    </div>\n    <div class=\"clear\">\n      <el-button type=\"danger\" @click=\"removeAll\">\n        清空\n      </el-button>\n    </div>\n    <!-- 搜索框 -->\n    <div class=\"search\">\n      <el-input\n        v-model=\"keywords\"\n        placeholder=\"请搜索关键词\"\n        class=\"input-with-select\"\n        @input=\"search\"\n      >\n        <el-select slot=\"prepend\" v-model=\"searchTarget\">\n          <el-option label=\"描述\" value=\"description\"></el-option>\n          <el-option label=\"状态\" value=\"status\"></el-option>\n          <el-option label=\"任务\" value=\"name\"></el-option>\n        </el-select>\n        <el-button slot=\"append\" icon=\"el-icon-search\" @click=\"search\"/>\n      </el-input>\n    </div>\n    <!-- 表格 -->\n    <div>\n      <el-table\n        v-loading=\"listLoading\"\n        :data=\"filterList\"\n        element-loading-text=\"Loading\"\n        :row-class-name=\"tableRowClassName\"\n        border\n        fit\n      >\n        <!-- 序号 -->\n        <el-table-column align=\"center\" label=\"序号\" width=\"50\">\n          <template slot-scope=\"scope\">\n            {{ scope.$index + 1 }}\n          </template>\n        </el-table-column>\n        <!-- 描述 -->\n        <el-table-column label=\"描述\" align=\"center\">\n          <template slot-scope=\"scope\">\n            <p class=\"single-line\">\n              {{ scope.row.description }}\n            </p>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"任务名称\" align=\"center\">\n          <template slot-scope=\"scope\">\n            <p class=\"single-line\">\n              {{ scope.row.name }}\n            </p>\n          </template>\n        </el-table-column>\n        <!-- 状态 -->\n        <el-table-column\n          class-name=\"status-col\"\n          label=\"状态\"\n          width=\"110\"\n          align=\"center\"\n        >\n          <template slot-scope=\"scope\">\n            <el-tag :type=\"scope.row.status | statusFilter\">\n              {{ scope.row.status }}\n            </el-tag>\n          </template>\n        </el-table-column>\n        <!-- 操作 -->\n        <el-table-column label=\"操作\" width=\"210\" align=\"center\">\n          <template slot-scope=\"scope\">\n            <el-button\n              size=\"mini\"\n              type=\"primary\"\n              @click=\"receiveTask(scope.$index)\"\n            >\n              领取\n            </el-button>\n            <el-button\n              size=\"mini\"\n              type=\"success\"\n              @click=\"handleEdit(scope.$index, scope.row)\"\n            >\n              编辑\n            </el-button>\n            <el-button\n              size=\"mini\"\n              type=\"danger\"\n              @click=\"handleDelete(scope.$index)\"\n            >\n              删除\n            </el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n    </div>\n    <!-- 任务创建框 -->\n    <el-dialog :visible.sync=\"showTaskForm\" :width=\"width\">\n      <el-form label-position=\"left\" label-width=\"80px\" :model=\"taskform\">\n        <el-form-item label=\"任务名称\">\n          <el-input v-model=\"taskform.name\"></el-input>\n        </el-form-item>\n        <div>请选择组成任务的图片</div>\n        <!--        <el-image v-for=\"(img,index) in imgList\" :key=\"index\"-->\n        <!--                  style=\"width: 100px; height: 100px\"-->\n        <!--                  :src=\"img.img\"-->\n        <!--                  @click=\"AddToImgList(img.img, img.id)\">-->\n        <!--          &lt;!&ndash;        <label v-for=\"(v, k) in checkedList\" :key=\"k\" v-show=\"img.id === v\">&ndash;&gt;-->\n        <!--          &lt;!&ndash;          <input type=\"checkbox\" :checked=\"val.id === v\">&ndash;&gt;-->\n        <!--          &lt;!&ndash;          <i>✓</i>&ndash;&gt;-->\n        <!--          &lt;!&ndash;        </label>&ndash;&gt;-->\n        <!--        </el-image>-->\n\n        <el-checkbox-group\n          v-model=\"checkList\"\n        >\n          <el-checkbox v-for=\"(img,index) in imgList\" :label=\"img.img.split('/').pop()\" :key=\"index\">\n            {{ img.img.split('/').pop() }}\n            <div><img :src=\"img.img\" style=\"width: 100px; height: 100px\" alt=\"\" class=\"img\" @click=\"selectImg\"></div>\n          </el-checkbox>\n        </el-checkbox-group>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button type=\"primary\" @click=\"handleSuccess\">\n          创建\n        </el-button>\n      </div>\n    </el-dialog>\n    <!-- 编辑框 -->\n    <el-dialog :visible.sync=\"showEditForm\" :width=\"width\">\n      <el-form label-position=\"left\" label-width=\"80px\" :model=\"form\">\n        <el-form-item label=\"描述\">\n          <el-input v-model=\"form.description\"></el-input>\n        </el-form-item>\n\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button type=\"primary\" @click=\"update()\">\n          更新\n        </el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport {\n  deleteAnnotateTextApi,\n  updateAnnotateTextInfoApi,\n  removeAllAnnotateTextApi,\n  addTaskApi,\n  receiveTaskApi\n} from \"@/api/annotateText\";\nimport {getToken} from \"@/utils/auth\";\nimport {mapGetters} from \"vuex\";\n\nexport default {\n  name: \"TableList\",\n  filters: {\n    statusFilter(status) {\n      const statusMap = {\n        已领取: \"success\",\n        未领取: \"gray\",\n        已完成: \"done\",\n      };\n      return statusMap[status];\n    },\n  },\n\n  data() {\n    return {\n      checkList: [],\n      searchTarget: \"描述\", // 搜索对象\n      showTaskForm: false,\n      keywords: \"\", // 搜索关键词\n      filterList: [], //符合条件的数据\n      imgList: [],\n      list: [], // 所有数据列表\n      listLoading: true, //加载效果\n      showEditForm: false, //编辑框的显隐\n      listEditIndex: 0, // 编辑索引\n      handleItemId: 0, // 操作条目的id\n      taskform: {\n        name: \"\",\n        status: \"\",\n        imgs: [],\n        description: \"\",\n      },\n      form: {\n        //编辑框数据\n        description: \"\",\n        text: \"\",\n      },\n    };\n  },\n  computed: {\n    // 编辑框宽度\n    width() {\n      return window.innerWidth <= 400 ? \"80%\" : \"30%\";\n    },\n    token() {\n      return getToken();\n    },\n    ...mapGetters([\"taskList\"]),\n    ...mapGetters([\"annotateTextList\"]),\n  },\n  mounted() {\n    this.list = this.filterList = this.taskList;\n    this.imgList = this.annotateTextList;\n    this.listLoading = false;\n  },\n  methods: {\n    selectImg() {\n      console.log(this.checkList)\n    },\n    getPreviewImgList: function (index) {\n      let arr = [];\n      for (let i = 0; i < this.imgList.length; i++) {\n        arr.push(this.imgList[i + index].img);\n        if (i + index >= this.imgList.length - 1) { // 为了取后边小值（采用绝对值）\n          index = 0 - (i + 1);\n        }\n      }\n      return arr;\n    },\n    AddToImgList(img, id) {\n      let index = this.checkedList.indexOf(id)\n      if (index === -1) {\n        this.checkedList.push(id)\n      } else {\n        this.checkedList.splice(index, 1)\n      }\n      this.taskform.imgs.push(img)\n      this.$message.info(\"fuck\")\n    },\n    taskCreate() {\n      this.showTaskForm = true;\n    },\n    onBeforeUpload(file) {\n      const isIMAGE = file.type === 'image/jpeg' || 'image/gif' || 'image/png' || 'video/mp4' || 'video/avi' || 'video/rmvb';\n\n      if (!isIMAGE) {\n        this.$message.error('上传文件只能是图片或者视频格式!');\n      }\n      return isIMAGE;\n    },\n    /**\n     * 上传成功的回调函数\n     * @param response 响应数据\n     */\n    handleSuccess() {\n      console.log(this.checkList);\n      this.taskform.imgs = this.checkList;\n      this.filterList.push(this.taskform);\n      this.$message.success(\"任务创建成功\");\n      this.$store.dispatch(\"user/setTaskList\", this.filterList);\n      console.log(\"%s\", this.taskform.name);\n      addTaskApi({\n        name: this.taskform.name,\n        status: this.taskform.status,\n        imgs: this.taskform.imgs,\n        description: this.taskform.description\n      });\n      this.showTaskForm = false;\n    },\n    /**\n     * 上传失败回调函数\n     */\n    handleError() {\n      this.$message.error(\"上传失败\");\n    },\n    /**\n     * 导出数据\n     */\n    //  TODO 导出数据\n    exportData() {\n    },\n    /**\n     * 清空文本数据\n     */\n    removeAll() {\n      this.$confirm(\"确定要删除吗?\", \"警告\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\",\n      }).then(() => {\n        removeAllAnnotateTextApi(this.token);\n        this.$store.dispatch(\"user/setTaskList\", []);\n        this.list = [];\n        this.filterList = [];\n      });\n    },\n\n    /**\n     * 搜索文本\n     */\n    search() {\n      let keywords = this.keywords.trim();\n\n      if (this.searchTarget == \"描述\") {\n        this.filterList = this.list.filter((item) =>\n          item.description.includes(keywords)\n        );\n      } else {\n        this.filterList = this.list.filter((item) =>\n          item[this.searchTarget].includes(keywords)\n        );\n      }\n    },\n    /**\n     * 表格样式\n     */\n    tableRowClassName({row, rowIndex}) {\n      row;\n      if (rowIndex % 2) {\n        return \"highlight-row\";\n      }\n      return \"\";\n    },\n    /**\n     * 前往标注页面\n     */\n    receiveTask(index) {\n      this.filterList[index].status = \"已领取\";\n      receiveTaskApi(this.filterList[index]).then((response) => {\n        console.log(response.data[\"flag\"])\n        if (response.data[\"flag\"]){\n          this.$message.success(\"领取成功\");\n        }\n      });\n    },\n    /**\n     * 编辑\n     * @param {object} row 操作当前行数据\n     */\n    handleEdit(index, row) {\n      this.showEditForm = true;\n      this.listEditIndex = index;\n      this.taskform.description = row.description;\n      this.taskform.name = row.name;\n      this.handleItemId = row.id;\n    },\n    /**\n     * 更新数据\n     */\n    update() {\n      this.filterList[this.listEditIndex].description = this.form.description;\n      this.filterList[this.listEditIndex].text = this.form.text;\n      updateAnnotateTextInfoApi(this.filterList[this.listEditIndex]);\n      this.list.forEach((item) => {\n        if (item.id === this.handleItemId) {\n          item.description = this.form.description;\n          item.text = this.form.text;\n        }\n      });\n      this.showEditForm = false;\n    },\n    /**\n     * 删除文本\n     */\n    handleDelete(index) {\n      let id = this.filterList[index].id;\n      deleteAnnotateTextApi(id);\n      this.filterList.splice(index, 1);\n      for (let i = 0; i < this.list.length; i++) {\n        if (this.list[i].id == id) {\n          this.list.splice(i, 1);\n          this.$store.dispatch(\"user/setAnnotateTextList\", this.list);\n        }\n      }\n    },\n  },\n};\n</script>\n<style lang=\"scss\">\n// 按钮组\n.button-group {\n  width: 100%;\n  display: inline;\n  margin: 0 20px 20px 20px;\n\n  &-item {\n    margin-right: 20px;\n    display: inline-block;\n  }\n}\n\n// 清空按钮\n.clear {\n  float: right;\n  margin-bottom: 20px;\n}\n\n// 搜索框\n.search {\n  margin-bottom: 20px;\n\n  .el-select {\n    width: 150px;\n  }\n}\n\n// 表格样式\n.el-table .highlight-row {\n  background: #ebf0fa;\n}\n\n//label {\n//  font-size: 25px;\n//  cursor: pointer;\n//  position: absolute;\n//  top: -10px;\n//  right: 0px;\n//  z-index: 150;\n//}\n//\n//label i {\n//  font-size: 15px;\n//  font-style: normal;\n//  display: inline-block;\n//  width: 18px;\n//  border-radius: 15px;\n//  height: 18px;\n//  text-align: center;\n//  line-height: 18px;\n//  color: #fff;\n//  vertical-align: middle;\n//  margin: -2px 2px 1px 0px;\n//  border: #53c7f0 1px solid;\n//}\n//\n//input[type=\"checkbox\"],\n//input[type=\"radio\"] {\n//  display: none;\n//  outline: none;\n//}\n//\n//input[type=\"radio\"] + i {\n//  border-radius: 7px;\n//}\n//\n//input[type=\"checkbox\"]:checked + i,\n//input[type=\"radio\"]:checked + i {\n//  background: #fff;\n//  color: #53c7f0;\n//}\n\n// 单行显示文本\n.single-line {\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n</style>\n"]}]}